/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => UniPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var UniPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.statusBarItem = null;
    this.patterns = [
      /arr[0-9]/gi,
      // arr[n].
      /m[0-9],[0-9]/gi,
      // m[n],[m].
      /\\pars/gi,
      // pars
      /\\arr/gi,
      // \begin{array}
      /\\code/
      // opens a code section with backticks
    ];
  }
  /**
   * Initializes the plugin when loaded.
   * - Creates and adds a status bar item for line count.
   * - Registers event listeners for editor changes.
   */
  async onload() {
    var _a;
    console.log("UniPlugin loaded! Have a good lesson\u{1F44B}");
    this.statusBarItem = this.addStatusBarItem();
    this.statusBarItem.setText("");
    (_a = this.statusBarItem.parentElement) == null ? void 0 : _a.prepend(this.statusBarItem);
    this.app.workspace.on("active-leaf-change", async () => {
      const file = this.app.workspace.getActiveFile();
      if (!file) {
        this.updateLineCount(void 0);
        return;
      }
      const content = await (file == null ? void 0 : file.vault.read(file));
      this.updateLineCount(content);
    });
    this.app.workspace.on("editor-change", (editor) => {
      const content = editor.getDoc().getValue();
      this.updateLineCount(content);
      this.mathSimplifier(editor);
    });
  }
  /**
   * Updates the line count displayed in the status bar item.
   * - Splits the file content by line breaks and dollar signs.
   * - Handles the case where the last line might be empty.
   * 
   * @param fileContent - The content of the current file. If undefined, hides the status bar item.
   */
  async updateLineCount(fileContent) {
    var _a, _b, _c;
    if (!fileContent) {
      (_a = this.statusBarItem) == null ? void 0 : _a.hide();
      return;
    }
    (_b = this.statusBarItem) == null ? void 0 : _b.show();
    const lines = fileContent.split(/\n|\${2}/);
    let amount = lines.length;
    if (lines[amount - 1] === "") {
      amount--;
    }
    (_c = this.statusBarItem) == null ? void 0 : _c.setText(`Lines: ${amount}`);
  }
  /**
   * Simplifies mathematical expressions in the editor based on predefined patterns.
   * - Replaces the recognized patterns with a simplified format.
   * 
   * @param editor - The editor instance where the math simplification takes place.
   */
  mathSimplifier(editor) {
    if (!editor)
      return;
    const cursorPos = editor.getCursor();
    const wordBeforeCursor = editor.getDoc().getRange(
      { line: cursorPos.line, ch: 0 },
      // Start of the line
      cursorPos
    ).split(/\s+/).pop();
    this.patterns.forEach((pattern, index) => {
      let newWord = "";
      let startPos;
      if (wordBeforeCursor && pattern.test(wordBeforeCursor)) {
        switch (index) {
          case 0:
            newWord = "\\begin{array}{" + "c".repeat(Number(wordBeforeCursor[wordBeforeCursor.length - 1]) - 1) + "|c}\\end{array}";
            startPos = { line: cursorPos.line, ch: cursorPos.ch - 4 };
            editor.getDoc().replaceRange(newWord, startPos, cursorPos);
            break;
          case 1:
            newWord = `M_{${Number(wordBeforeCursor[wordBeforeCursor.length - 3])},${Number(wordBeforeCursor[wordBeforeCursor.length - 1])}} = \\pmatrix{}`;
            startPos = { line: cursorPos.line, ch: cursorPos.ch - 4 };
            editor.getDoc().replaceRange(newWord, startPos, cursorPos);
            break;
          case 2:
            newWord = "\\left(\\right)";
            startPos = { line: cursorPos.line, ch: cursorPos.ch - 5 };
            editor.getDoc().replaceRange(newWord, startPos, cursorPos);
            break;
          case 3:
            newWord = "\\begin{array}{}\\end{array}";
            startPos = { line: cursorPos.line, ch: cursorPos.ch - 4 };
            editor.getDoc().replaceRange(newWord, startPos, cursorPos);
            break;
          case 4:
            newWord = `\`\`\`

\`\`\``;
            startPos = { line: cursorPos.line, ch: cursorPos.ch - 5 };
            editor.getDoc().replaceRange(newWord, startPos, cursorPos);
            break;
        }
      }
    });
  }
  /**
   * Cleans up the plugin when it is unloaded.
   * - Removes the status bar item.
   */
  onunload() {
    var _a;
    console.log("UniPlugin unloaded! Bye bye\u{1F44B}");
    (_a = this.statusBarItem) == null ? void 0 : _a.remove();
  }
};
//# sourceMappingURL=data:application/json;base64,
